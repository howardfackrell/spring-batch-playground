/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package batch.commands;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class JobCommand extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3310824242402942748L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JobCommand\",\"namespace\":\"batch.commands\",\"fields\":[{\"name\":\"correlationId\",\"type\":\"long\"},{\"name\":\"executionId\",\"type\":\"long\"},{\"name\":\"action\",\"type\":{\"type\":\"enum\",\"name\":\"Action\",\"symbols\":[\"RUN\",\"RERUN\",\"STOP\",\"DELETE\",\"SHUTDOWN\"]}},{\"name\":\"jobParameters\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<JobCommand> ENCODER =
      new BinaryMessageEncoder<JobCommand>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<JobCommand> DECODER =
      new BinaryMessageDecoder<JobCommand>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<JobCommand> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<JobCommand> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<JobCommand> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<JobCommand>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this JobCommand to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a JobCommand from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a JobCommand instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static JobCommand fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long correlationId;
  @Deprecated public long executionId;
  @Deprecated public batch.commands.Action action;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> jobParameters;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public JobCommand() {}

  /**
   * All-args constructor.
   * @param correlationId The new value for correlationId
   * @param executionId The new value for executionId
   * @param action The new value for action
   * @param jobParameters The new value for jobParameters
   */
  public JobCommand(java.lang.Long correlationId, java.lang.Long executionId, batch.commands.Action action, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> jobParameters) {
    this.correlationId = correlationId;
    this.executionId = executionId;
    this.action = action;
    this.jobParameters = jobParameters;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return correlationId;
    case 1: return executionId;
    case 2: return action;
    case 3: return jobParameters;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: correlationId = (java.lang.Long)value$; break;
    case 1: executionId = (java.lang.Long)value$; break;
    case 2: action = (batch.commands.Action)value$; break;
    case 3: jobParameters = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'correlationId' field.
   * @return The value of the 'correlationId' field.
   */
  public long getCorrelationId() {
    return correlationId;
  }


  /**
   * Sets the value of the 'correlationId' field.
   * @param value the value to set.
   */
  public void setCorrelationId(long value) {
    this.correlationId = value;
  }

  /**
   * Gets the value of the 'executionId' field.
   * @return The value of the 'executionId' field.
   */
  public long getExecutionId() {
    return executionId;
  }


  /**
   * Sets the value of the 'executionId' field.
   * @param value the value to set.
   */
  public void setExecutionId(long value) {
    this.executionId = value;
  }

  /**
   * Gets the value of the 'action' field.
   * @return The value of the 'action' field.
   */
  public batch.commands.Action getAction() {
    return action;
  }


  /**
   * Sets the value of the 'action' field.
   * @param value the value to set.
   */
  public void setAction(batch.commands.Action value) {
    this.action = value;
  }

  /**
   * Gets the value of the 'jobParameters' field.
   * @return The value of the 'jobParameters' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getJobParameters() {
    return jobParameters;
  }


  /**
   * Sets the value of the 'jobParameters' field.
   * @param value the value to set.
   */
  public void setJobParameters(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.jobParameters = value;
  }

  /**
   * Creates a new JobCommand RecordBuilder.
   * @return A new JobCommand RecordBuilder
   */
  public static batch.commands.JobCommand.Builder newBuilder() {
    return new batch.commands.JobCommand.Builder();
  }

  /**
   * Creates a new JobCommand RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new JobCommand RecordBuilder
   */
  public static batch.commands.JobCommand.Builder newBuilder(batch.commands.JobCommand.Builder other) {
    if (other == null) {
      return new batch.commands.JobCommand.Builder();
    } else {
      return new batch.commands.JobCommand.Builder(other);
    }
  }

  /**
   * Creates a new JobCommand RecordBuilder by copying an existing JobCommand instance.
   * @param other The existing instance to copy.
   * @return A new JobCommand RecordBuilder
   */
  public static batch.commands.JobCommand.Builder newBuilder(batch.commands.JobCommand other) {
    if (other == null) {
      return new batch.commands.JobCommand.Builder();
    } else {
      return new batch.commands.JobCommand.Builder(other);
    }
  }

  /**
   * RecordBuilder for JobCommand instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JobCommand>
    implements org.apache.avro.data.RecordBuilder<JobCommand> {

    private long correlationId;
    private long executionId;
    private batch.commands.Action action;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> jobParameters;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(batch.commands.JobCommand.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[0].schema(), other.correlationId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.executionId)) {
        this.executionId = data().deepCopy(fields()[1].schema(), other.executionId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.action)) {
        this.action = data().deepCopy(fields()[2].schema(), other.action);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.jobParameters)) {
        this.jobParameters = data().deepCopy(fields()[3].schema(), other.jobParameters);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing JobCommand instance
     * @param other The existing instance to copy.
     */
    private Builder(batch.commands.JobCommand other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[0].schema(), other.correlationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.executionId)) {
        this.executionId = data().deepCopy(fields()[1].schema(), other.executionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.action)) {
        this.action = data().deepCopy(fields()[2].schema(), other.action);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.jobParameters)) {
        this.jobParameters = data().deepCopy(fields()[3].schema(), other.jobParameters);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'correlationId' field.
      * @return The value.
      */
    public long getCorrelationId() {
      return correlationId;
    }


    /**
      * Sets the value of the 'correlationId' field.
      * @param value The value of 'correlationId'.
      * @return This builder.
      */
    public batch.commands.JobCommand.Builder setCorrelationId(long value) {
      validate(fields()[0], value);
      this.correlationId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'correlationId' field has been set.
      * @return True if the 'correlationId' field has been set, false otherwise.
      */
    public boolean hasCorrelationId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'correlationId' field.
      * @return This builder.
      */
    public batch.commands.JobCommand.Builder clearCorrelationId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'executionId' field.
      * @return The value.
      */
    public long getExecutionId() {
      return executionId;
    }


    /**
      * Sets the value of the 'executionId' field.
      * @param value The value of 'executionId'.
      * @return This builder.
      */
    public batch.commands.JobCommand.Builder setExecutionId(long value) {
      validate(fields()[1], value);
      this.executionId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'executionId' field has been set.
      * @return True if the 'executionId' field has been set, false otherwise.
      */
    public boolean hasExecutionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'executionId' field.
      * @return This builder.
      */
    public batch.commands.JobCommand.Builder clearExecutionId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'action' field.
      * @return The value.
      */
    public batch.commands.Action getAction() {
      return action;
    }


    /**
      * Sets the value of the 'action' field.
      * @param value The value of 'action'.
      * @return This builder.
      */
    public batch.commands.JobCommand.Builder setAction(batch.commands.Action value) {
      validate(fields()[2], value);
      this.action = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'action' field has been set.
      * @return True if the 'action' field has been set, false otherwise.
      */
    public boolean hasAction() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'action' field.
      * @return This builder.
      */
    public batch.commands.JobCommand.Builder clearAction() {
      action = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'jobParameters' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getJobParameters() {
      return jobParameters;
    }


    /**
      * Sets the value of the 'jobParameters' field.
      * @param value The value of 'jobParameters'.
      * @return This builder.
      */
    public batch.commands.JobCommand.Builder setJobParameters(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.jobParameters = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'jobParameters' field has been set.
      * @return True if the 'jobParameters' field has been set, false otherwise.
      */
    public boolean hasJobParameters() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'jobParameters' field.
      * @return This builder.
      */
    public batch.commands.JobCommand.Builder clearJobParameters() {
      jobParameters = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public JobCommand build() {
      try {
        JobCommand record = new JobCommand();
        record.correlationId = fieldSetFlags()[0] ? this.correlationId : (java.lang.Long) defaultValue(fields()[0]);
        record.executionId = fieldSetFlags()[1] ? this.executionId : (java.lang.Long) defaultValue(fields()[1]);
        record.action = fieldSetFlags()[2] ? this.action : (batch.commands.Action) defaultValue(fields()[2]);
        record.jobParameters = fieldSetFlags()[3] ? this.jobParameters : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<JobCommand>
    WRITER$ = (org.apache.avro.io.DatumWriter<JobCommand>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<JobCommand>
    READER$ = (org.apache.avro.io.DatumReader<JobCommand>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.correlationId);

    out.writeLong(this.executionId);

    out.writeEnum(this.action.ordinal());

    long size0 = this.jobParameters.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e0: this.jobParameters.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.CharSequence v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.correlationId = in.readLong();

      this.executionId = in.readLong();

      this.action = batch.commands.Action.values()[in.readEnum()];

      long size0 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.jobParameters; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
        this.jobParameters = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence k0 = null;
          k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
          java.lang.CharSequence v0 = null;
          v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
          m0.put(k0, v0);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.correlationId = in.readLong();
          break;

        case 1:
          this.executionId = in.readLong();
          break;

        case 2:
          this.action = batch.commands.Action.values()[in.readEnum()];
          break;

        case 3:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.jobParameters; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
            this.jobParameters = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence k0 = null;
              k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
              java.lang.CharSequence v0 = null;
              v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
              m0.put(k0, v0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










